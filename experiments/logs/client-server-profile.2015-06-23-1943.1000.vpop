Wrote profile results to profiler.py.lprof
Timer unit: 1e-06 s

Total time: 12.1458 s
File: profiler.py
Function: clientEval at line 25

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    25                                           @profile
    26                                           def clientEval(prf, serverEval):
    27                                               """
    28                                               Runs a client-driven eval request using the provided @prf module and
    29                                               the @serverEval function.
    30                                               """
    31                                               # Make an eval request
    32      1000       257939    257.9      2.1      r,x = prf.blind(m)
    33      1000        25340     25.3      0.2      xWrap = prf.wrap(x)
    34                                           
    35                                               # Create a request object and query the server
    36      1000         3293      3.3      0.0      request = dummyRequest(w,t,x=xWrap)
    37      1000      6430040   6430.0     52.9      response = serverEval(request)
    38                                           
    39                                               # Check the response
    40      1000         1133      1.1      0.0      if response.status_code != 200:
    41                                                   raise Exception("Server Error: HTTP response code {}".format(response.status_code))
    42                                           
    43                                               # Decode the JSON response into a dictionary
    44      1000        20285     20.3      0.2      d = json.loads(response.content)
    45                                           
    46                                               # Deserialize the items needed to verify the proof.
    47      1000        80041     80.0      0.7      y = prf.unwrapY(d["y"])
    48      1000        45983     46.0      0.4      p = prf.unwrapP(d["p"])
    49                                           
    50                                               # BLS proofs omit c,u
    51      1000         1508      1.5      0.0      if "c" in d and "u" in d:
    52      1000         5375      5.4      0.0          (c,u) = (prf.unwrapC(d["c"]), prf.unwrapU(d["u"]) )
    53                                               else:
    54                                                   (c,u) = (None,None)
    55                                           
    56      1000          790      0.8      0.0      pi = (p,c,u)
    57                                           
    58                                               # Test the proof
    59      1000      4114529   4114.5     33.9      prf.verify(x, t, y, pi, errorOnFail=True)
    60                                           
    61                                               # Deblind if necessary.
    62      1000         1400      1.4      0.0      if r:
    63      1000      1158127   1158.1      9.5          z = prf.deblind(r, y)

Total time: 6.41891 s
File: viewsprofiler.py
Function: eval at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def eval(request, prf):
    17                                               """
    18                                               Process eval @request using @prf. This is a common routine for evalVpop, 
    19                                               evalVprf (also called eval-unb), and evalBls.
    20                                               """
    21      1000          776      0.8      0.0      required = ["w", "t", "x"]
    22      1000          633      0.6      0.0      optional = ["skid", "skipproof"]
    23                                           
    24                                               # Parse and validate parameters from the request.
    25      1000          519      0.5      0.0      try:
    26                                                   w,t,x,skid,skipproof = \
    27      1000        12047     12.0      0.2              getParams(request, required, optional)
    28                                           
    29                                               except ServiceException as e:
    30                                                   return e.errorResponse
    31                                           
    32                                               # Include a proof unless there's a specific request to omit it.
    33      1000          658      0.7      0.0      proof = not skipproof
    34                                           
    35                                               # Check rate-limits
    36      1000       891786    891.8     13.9      if not noteQuery(t):
    37                                                   return ErrorResponse(ERROR_EXCEEDED_QUERY_LIMIT, ERROR_CODE_QUERY_LIMIT)
    38                                           
    39                                               # Run eval and send the response as JSON
    40      1000      5512487   5512.5     85.9      return JsonResponse(runEval(prf,w,t,x,proof))

Total time: 5.4362 s
File: viewsprofiler.py
Function: runEval at line 42

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    42                                           @profile
    43                                           def runEval(prf,w,t,x,proof):
    44                                               """
    45                                               Runs the Pythia eval function using @prf.
    46                                               """
    47                                               # Deserialize parameter x
    48      1000        56733     56.7      1.0      x = prf.unwrapX(x)
    49                                           
    50                                               # Get the (secret) state table entry assigned to this w
    51      1000      1196221   1196.2     22.0      s = getStateEntry(w)
    52      1000      1536128   1536.1     28.3      y,kw,tTilde = prf.eval(w,t,x,SERVER_SECRET_KEY,s)
    53                                           
    54                                               # Package our results into a dictionary d
    55      1000        41799     41.8      0.8      d = { "y" : prf.wrap(y),
    56      1000          843      0.8      0.0            "message" : "Thank you for using the Pythia PRF service for all your password hardening needs", 
    57                                                   }
    58                                           
    59                                               # Generate a proof, if requested. Note that BLS eval queries don't have any
    60                                               # proof beyond
    61      1000          566      0.6      0.0      if proof:
    62      1000      2534421   2534.4     46.6          p,c,u = prf.prove(x,tTilde,kw,y)
    63      1000        26629     26.6      0.5          d.update( { "p": prf.wrap(p) } )
    64                                           
    65                                                   # The BLS protocol doesn't have items c,u
    66      1000          914      0.9      0.0          if c and u:
    67      1000          590      0.6      0.0              d.update( 
    68      1000        23244     23.2      0.4                  { "c": prf.wrap(c),
    69      1000        17592     17.6      0.3                    "u": prf.wrap(u)
    70                                                            } )
    71                                           
    72      1000          517      0.5      0.0      return d

